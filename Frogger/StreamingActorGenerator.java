import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)
import java.util.concurrent.*;

/**
 * Invisible actor which can repeatedly spawn StreamingActor objects every specified interval
 * all publicly exposed fields are immutable
 */
public class StreamingActorGenerator extends Actor
{
    // ScheduledFuture can be used to run code every x interval
    private ScheduledFuture<?> generator;
    public final int speed;
    private final long interval;
    private final StreamingActorType sActor;
    
    // sActor should NOT be null
    // speed = generated actor speed
    // interval = create new actor every x milliseconds
    // sActor = streaming actor generated by this generator
    public StreamingActorGenerator(int speed, long interval, StreamingActorType sActor) 
    {
        getImage().setTransparency(0); // invisible
        this.speed = speed;
        this.interval = interval;
        this.sActor = sActor;
    }

    // called when the actor has been added to the world
    // getWorld() calls should always return a valid reference in this method
    @Override
    protected void addedToWorld(World _w) {
        // should ALWAYS succeed
        // (the initial parameter can't be type FroggerWorld as the method signature has to match in order to @Override it)
        FroggerWorld w = (FroggerWorld) _w;
        
        // schedule our lambda expression (anonymous function) which is our code that constantly adds streaming actors based on the interval (ms)
        generator = w.scheduledExec.scheduleAtFixedRate(() -> {
            StreamingActor toAdd;
            
            switch (sActor) {
                case CAR:
                    toAdd = new Car(speed);
                    break;
                case LILY_PAD:
                default:
                    toAdd = new LilyPad(speed);
                    break;
                case PEPED:
                    toAdd = new PepeDancing(speed);
            }
            
            w.addObject(toAdd, getX(), getY());
        }, 0, interval, TimeUnit.MILLISECONDS);
    }
    
    // stops the scheduled spawning task
    // always call before removing from world or we lose the reference to the responsible scheduledfuture, meaning we can't stop it
    // (and memory leak)
    // (really wish there was a removedfromworld() method we could override too)
    public void stop() {
        generator.cancel(false);
    }
    
    // get sactgen ref presets by id
    // used for deserializing level data and loading levels
    public static StreamingActorGenerator getSActGenPresetById(int id) {
        // note: slight interval/speed differences between rtl/ltr cases which are otherwise identical
        // for difficulty purposes
        switch (id) {
            case 0:
                return null;
            case 1: // LTR LEAFPADS 
                return new StreamingActorGenerator(-1 * (Greenfoot.getRandomNumber(3) + 2), (int)(Greenfoot.getRandomNumber(1500)*1.25 + 2000), StreamingActorType.LILY_PAD);
            case 2: // RTL LEAFPADS 
                return new StreamingActorGenerator(Greenfoot.getRandomNumber(3) + 2, (int)(Greenfoot.getRandomNumber(1500)*1.25 + 2000), StreamingActorType.LILY_PAD);
            case 3: // LTR CARS 
                return new StreamingActorGenerator(-1 * (Greenfoot.getRandomNumber(5) + 2), (int)(Greenfoot.getRandomNumber(1500)*1.25 + 2000), StreamingActorType.CAR);
            case 4: // RTL CARS 
                return new StreamingActorGenerator(Greenfoot.getRandomNumber(5) + 2, (int)(Greenfoot.getRandomNumber(1500)*1.25 + 2000), StreamingActorType.CAR);
            case 5: // LTR PEPED 
                return new StreamingActorGenerator(-1 * (Greenfoot.getRandomNumber(5) + 2), (int)(Greenfoot.getRandomNumber(1000) + 1500), StreamingActorType.PEPED);
            case 6: // RTL PEPED
                return new StreamingActorGenerator(Greenfoot.getRandomNumber(5) + 2, (int)(Greenfoot.getRandomNumber(1000) + 1500), StreamingActorType.PEPED);
            default:
                throw new LevelLoadException("Invalid SActorGen id, check the getSActGenPresetById() method for proper ids");
        }
    }
}
